diff --git a/node_modules/expo-av/ios/EXAV/EXAVPlayerData.m b/node_modules/expo-av/ios/EXAV/EXAVPlayerData.m
index 99dc808..5e0be3e 100644
--- a/node_modules/expo-av/ios/EXAV/EXAVPlayerData.m
+++ b/node_modules/expo-av/ios/EXAV/EXAVPlayerData.m
@@ -158,23 +158,33 @@ NSString *const EXAVPlayerDataObserverMetadataKeyPath = @"timedMetadata";
   // unless we preload, the asset will not necessarily load the duration by the time we try to play it.
   // http://stackoverflow.com/questions/20581567/avplayer-and-avfoundationerrordomain-code-11819
   EX_WEAKIFY(self);
-  [avAsset loadValuesAsynchronouslyForKeys:@[ @"duration" ] completionHandler:^{
+  [avAsset loadValuesAsynchronouslyForKeys:@[ @"isPlayable", @"duration" ] completionHandler:^{
     EX_ENSURE_STRONGIFY(self);
+    NSError *error = nil;
+    AVKeyValueStatus status = [avAsset statusOfValueForKey:@"isPlayable" error:&error];
 
-    // We prepare three items for AVQueuePlayer, so when the first finishes playing,
-    // second can start playing and the third can start preparing to play.
-    AVPlayerItem *firstplayerItem = [AVPlayerItem playerItemWithAsset:avAsset];
-    AVPlayerItem *secondPlayerItem = [AVPlayerItem playerItemWithAsset:avAsset];
-    AVPlayerItem *thirdPlayerItem = [AVPlayerItem playerItemWithAsset:avAsset];
-    self.items = @[firstplayerItem, secondPlayerItem, thirdPlayerItem];
-    self.player = [AVQueuePlayer queuePlayerWithItems:@[firstplayerItem, secondPlayerItem, thirdPlayerItem]];
-    if (self.player) {
-      [self _addObserver:self.player forKeyPath:EXAVPlayerDataObserverStatusKeyPath];
-      [self _addObserver:self.player.currentItem forKeyPath:EXAVPlayerDataObserverStatusKeyPath];
-      [self _addObserver:self.player.currentItem forKeyPath:EXAVPlayerDataObserverMetadataKeyPath];
-    } else {
-      NSString *errorMessage = @"Load encountered an error: [AVPlayer playerWithPlayerItem:] returned nil.";
+    if (status == AVKeyValueStatusLoaded && !avAsset.isPlayable) {
+      NSString *errorMessage = @"The asset does not contains playable content";
       [self _finishLoadWithError:errorMessage];
+      return;
+
+    } else {
+
+      // We prepare three items for AVQueuePlayer, so when the first finishes playing,
+      // second can start playing and the third can start preparing to play.
+      AVPlayerItem *firstplayerItem = [AVPlayerItem playerItemWithAsset:avAsset];
+      AVPlayerItem *secondPlayerItem = [AVPlayerItem playerItemWithAsset:avAsset];
+      AVPlayerItem *thirdPlayerItem = [AVPlayerItem playerItemWithAsset:avAsset];
+      self.items = @[firstplayerItem, secondPlayerItem, thirdPlayerItem];
+      self.player = [AVQueuePlayer queuePlayerWithItems:@[firstplayerItem, secondPlayerItem, thirdPlayerItem]];
+      if (self.player) {
+        [self _addObserver:self.player forKeyPath:EXAVPlayerDataObserverStatusKeyPath];
+        [self _addObserver:self.player.currentItem forKeyPath:EXAVPlayerDataObserverStatusKeyPath];
+        [self _addObserver:self.player.currentItem forKeyPath:EXAVPlayerDataObserverMetadataKeyPath];
+      } else {
+        NSString *errorMessage = @"Load encountered an error: [AVPlayer playerWithPlayerItem:] returned nil.";
+        [self _finishLoadWithError:errorMessage];
+      }
     }
   }];
 }
